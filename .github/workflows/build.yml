name: Build mfaktc software

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
# Begin job "build-linux"
  build-linux:
    runs-on: ubuntu-latest

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      matrix:
        sys:
          # Specified version combination must exist as CUDA container image from NVidia: nvcr.io/nvidia/cuda:${{ matrix.sys.cuda_version }}-devel-${{ matrix.sys.ct_os }}
          # Available versions can be found here: https://catalog.ngc.nvidia.com/orgs/nvidia/containers/cuda/tags (note that only Ubuntus are supported by this action)
          - { cuda_version: '12.8.0', ct_os: 'ubuntu24.04' }

    env:
      # We can't use GitHub direct container support on old Ubuntu versions, because actions will fail running from these due to old glibc.cancel-timeout-minutes.cancel-timeout-minutes.
      # As a workaround, Docker containers will be launched separately, running build related actions inside the container via 'docker exec', while generic actions will run on the
      # host runner VM itself.
      CONTAINER: "nvcr.io/nvidia/cuda:${{ matrix.sys.cuda_version }}-devel-${{ matrix.sys.ct_os }}"

    steps:

      - name: Start Docker Container
        run: |
          docker pull $CONTAINER
          docker run --name build-container -d -v ${{ github.workspace }}:/workspace $CONTAINER tail -f /dev/null

      - name: Fix GPG keys for NVidia repo on Ubuntu 16.04
        if: matrix.sys.ct_os == 'ubuntu16.04'
        env:
          SCRIPT: apt-key add /workspace/3bf863cc.pub
        run: |
          wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/3bf863cc.pub
          docker exec build-container bash -c "$SCRIPT"

      - name: Update & install required packages inside the container
        env:
          SCRIPT: |
            apt update
            apt -y full-upgrade
            apt install -y build-essential curl git make python3 sudo unzip wget zip clang
        run: docker exec build-container bash -c "$SCRIPT"

      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Update Makefile
        id: update_makefile
        shell: bash
        env:
          SCRIPT: |
            cd /workspace
            echo -n "Checking for nvcc maximum supported CC... "
            export CCMAX=$(nvcc --help | grep -Eoe "compute_[0-9a]{2,3}" | cut -d '_' -f2 | sort -un | tail -n1)
            echo $CCMAX
            echo "CCMAX=$CCMAX" >> GITHUB_OUTPUT
            echo "All supported CC: $(nvcc --help | grep -Eoe "compute_[0-9a]+" | cut -d '_' -f2 | sort -un | xargs)"

            echo "Adding libraries to LDFLAGS to support static build on older Ubuntu versions..."
            sed -i -E 's/^(LDFLAGS = .*? -lcudart_static) (.*)/\1 -ldl -lrt -lpthread \2/' src/Makefile
        run: |
          docker exec build-container bash -c "$SCRIPT"
          cat GITHUB_OUTPUT > $GITHUB_OUTPUT
          rm -f GITHUB_OUTPUT

      - name: Build from sources
        env:
          SCRIPT: cd /workspace/src && make -j$(nproc)
        run: docker exec build-container bash -c "$SCRIPT"

      - name: Prepare zip archive with the description
        env:
          SCRIPT: |
            cd /workspace
            export BASE_NAME="mfaktc-${{ github.ref_name }}-linux64-cuda${{ matrix.sys.cuda_version }}"
            zip -9 -j ${BASE_NAME}.zip *
            echo "[${BASE_NAME}.zip](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/${BASE_NAME}.zip) | \
            ${{ steps.update_makefile.outputs.CCMAX }} | ${{ matrix.sys.ct_os }} | $(gcc --version | head -n1) | $(nvcc --version | tail -n1)" > ${BASE_NAME}.txt
        run: docker exec build-container bash -c "$SCRIPT"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: mfaktc-${{ github.ref_name }}-linux64-cuda${{ matrix.sys.cuda_version }}
          path: mfaktc-${{ github.ref_name }}-linux64-cuda${{ matrix.sys.cuda_version }}.*
# End job "build-linux"

# Begin job "build-win"
  build-win:
    runs-on: windows-latest

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      matrix:
        # Available version can be viewed at the Jimver/cuda-toolkit action sources:
        # https://github.com/Jimver/cuda-toolkit/blob/v0.2.21/src/links/windows-links.ts
        sys:
          - cuda_version: '12.8.0'
          - cuda_version: '12.0.0'
          - cuda_version: '11.0.1'
          - cuda_version: '10.0.130'

    env:
      base_name: mfaktc-${{ github.ref_name }}-win64-cuda${{ matrix.sys.cuda_version }}

    steps:
      - name: Installing CUDA Toolkit
        id: cuda-toolkit
        uses: Jimver/cuda-toolkit@v0.2.21
        with:
          cuda: ${{ matrix.sys.cuda_version }}

      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Update Makefile
        id: update_makefile
        run: |
          choco install -y gawk grep sed
          nvcc --help | grep -Eoe "compute_[0-9a]+" | sed -E 's/compute_([0-9a]+)/\\1/g' | awk 'BEGIN { CC=0 }{ if (CC < 0+$1) CC=0+$1 }END{ print CC }' | sed -E 's/.*/CCMAX=\\0/'
          nvcc --help | grep -Eoe "compute_[0-9a]+" | sed -E 's/compute_([0-9a]+)/\\1/g' | awk 'BEGIN { CC=0 }{ if (CC < 0+$1) CC=0+$1 }END{ print CC }' | sed -E 's/.*/CCMAX=\\0/' > $GITHUB_OUTPUT

#      - uses: johnnynunez/vsdevenv-shell@v2
#        shell: vsdevenv x64 bash {0}

      - name: Build from sources test
        shell: cmd
        run: |
          cd src && make -d -f Makefile.win
#          cl /Ox /Oy /W2 /fp:fast /nologo /c /Tp sieve.c
#          cl /Ox /Oy /W2 /fp:fast /nologo /c /Tp timer.c
#          make -d -f Makefile.win sieve.obj
#          dir

#          "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat" -arch=amd64 & 
#          choco install -y make
#          & nvcc -O2 -c tf_96bit.cu -o tf_96bit.obj -DWIN64 -Xcompiler /EHsc,/W3,/nologo,/Ox -m64 --ptxas-options=-v -arch=all -O3 -DSHORTCUT_75BIT
#          make -f Makefile.win
#          "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat" -arch=amd64 & nvcc -O2 -c tf_96bit.cu -o tf_96bit.obj -DWIN64 -Xcompiler /EHsc,/W3,/nologo,/Ox -m64 --ptxas-options=-v -arch=all -O3 -DSHORTCUT_75BIT

#      - name: Setup tmate session
#        if: ${{ failure() }}
#        uses: mxschmitt/action-tmate@v3
#        with:
#          limit-access-to-actor: true

      - name: Prepare build archive with description
# Set-Variable -Name "BASE_NAME" -Value "mfaktc-${{ github.ref_name }}-win64-cuda${{ matrix.sys.cuda_version }}"
        run: |
          choco install -y zip
          zip -9 -j "${{ env.base_name }}.zip" *
          echo " [${{ env.base_name }}.zip](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/${{ env.base_name }}.zip) | ${{ steps.update_makefile.outputs.CCMAX }} | Windows | --- | --- " > "${{ env.base_name }}.txt"
          bash -c "ls -l"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.base_name }}
          path: ${{ env.base_name }}.*
# End job "build-win"

  upload_release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: [ build-linux, build-win ]
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:

      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: Prepare list of release files & release notes
        id: makeinfo
        run: |
          echo -e "Binary releases (automated builds) below. Max CC in the table means maximum supported compute capability version without dot (i.e. 90 reads as 9.0).\n" > RELEASE_NOTES.txt
          echo "Filename | Max CC | Build OS | GCC version | NVCC version" >> RELEASE_NOTES.txt
          echo "--- | --- | --- | --- | ---" >> RELEASE_NOTES.txt
          cat mfaktc-${{ github.ref_name }}-*-cuda*/mfaktc-${{ github.ref_name }}-*-cuda*.txt | sort -Vr >> RELEASE_NOTES.txt
          echo 'RELEASE_FILES<<EOF' > $GITHUB_OUTPUT
          ls -1 mfaktc-${{ github.ref_name }}-*-cuda*/mfaktc-${{ github.ref_name }}-*-cuda*.zip | sort -Vr >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

      - name: Make and upload release
        uses: softprops/action-gh-release@v2.2.1
        with:
          fail_on_unmatched_files: false
          files: |
            ${{ steps.makeinfo.outputs.RELEASE_FILES }}
          preserve_order: true
          generate_release_notes: true
          body_path: RELEASE_NOTES.txt
          make_latest: true
