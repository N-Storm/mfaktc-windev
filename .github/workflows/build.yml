name: Build mfaktc software

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
# Begin job "build-linux"
  build-linux:
    runs-on: ubuntu-latest

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      matrix:
        sys:
          # Specified version combination must exist as CUDA container image from NVidia: nvcr.io/nvidia/cuda:${{ matrix.sys.cuda_version }}-devel-${{ matrix.sys.ct_os }}
          # Available versions can be found here: https://catalog.ngc.nvidia.com/orgs/nvidia/containers/cuda/tags (note that only Ubuntus are supported by this action)
          - { cuda_version: '11.8.0', ct_os: 'ubuntu22.04' }
#          - { cuda_version: '11.0.3', ct_os: 'ubuntu20.04' }

    env:
      # We can't use GitHub direct container support on old Ubuntu versions, because actions will fail running from these due to old glibc.cancel-timeout-minutes.cancel-timeout-minutes.
      # As a workaround, Docker containers will be launched separately, running build related actions inside the container via 'docker exec', while generic actions will run on the
      # host runner VM itself.
      CONTAINER: "nvcr.io/nvidia/cuda:${{ matrix.sys.cuda_version }}-devel-${{ matrix.sys.ct_os }}"
      base_name: mfaktc-${{ github.ref_name }}-linux64-cuda${{ matrix.sys.cuda_version }}

    steps:

      - name: Start Docker Container
        run: |
          docker pull $CONTAINER
          docker run --name build-container -d -v ${{ github.workspace }}:/workspace $CONTAINER tail -f /dev/null

      - name: Fix GPG keys for NVidia repo on Ubuntu 16.04
        if: matrix.sys.ct_os == 'ubuntu16.04'
        env:
          SCRIPT: apt-key add /workspace/3bf863cc.pub
        run: |
          wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/3bf863cc.pub
          docker exec build-container bash -c "$SCRIPT"

      - name: Update & install required packages inside the container
        env:
          SCRIPT: |
            apt update
            apt -y full-upgrade
            apt install -y build-essential curl git make python3 sudo unzip wget zip
        run: docker exec build-container bash -c "$SCRIPT"

      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Prepare sources and gather info
        id: prepare
        shell: bash
        env:
          SCRIPT: |
            cd /workspace
            echo -n "Checking for nvcc maximum supported CC... "
            export CCMAX=$(nvcc --help | grep -Eoe "compute_[0-9]+" | cut -d '_' -f2 | sort -un | tail -n1)
            echo $CCMAX
            echo "CCMAX=$CCMAX" >> GITHUB_OUTPUT
            echo "All supported CC: $(nvcc --help | grep -Eoe "compute_[0-9a]+" | cut -d '_' -f2 | sort -un | xargs)"
            echo "Removing CC arch entries from the Makefile.win and adding all, which current nvcc claims to support..."
            sed -i '/^NVCCFLAGS += --generate-code arch=compute.*/d' src/Makefile
            nvcc --help | grep -Eoe 'compute_[0-9]+' | cut -d '_' -f2 | sort -un | xargs -i bash -c "sed -i \"/^NVCCFLAGS = .*$/a NVCCFLAGS += --generate-code arch=compute_{},code=sm_{}\" src/Makefile"
            echo "Adding libraries to LDFLAGS to support static build on older Ubuntu versions..."
            sed -i -E 's/^(LDFLAGS = .*? -lcudart_static) (.*)/\1 -ldl -lrt -lpthread \2/' src/Makefile
        run: |
          docker exec build-container bash -c "$SCRIPT"
          cat GITHUB_OUTPUT > $GITHUB_OUTPUT
          rm -f GITHUB_OUTPUT

      - name: Build from sources
        env:
          SCRIPT: cd /workspace/src && make -j$(nproc)
        run: docker exec build-container bash -c "$SCRIPT"

      - name: Setup tmate session
        if: ${{ failure() }}
        uses: mxschmitt/action-tmate@v3
        with:
          limit-access-to-actor: true

      - name: Prepare zip archive with the description
        env:
          SCRIPT: |
            cd /workspace
            zip -9 -j ${{ env.base_name }}.zip *
            echo "[${{ env.base_name }}.zip](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/${{ env.base_name }}.zip) | \
            ${{ steps.prepare.outputs.CCMAX }} | ${{ matrix.sys.ct_os }} | $(gcc --version | head -n1) | $(nvcc --version | tail -n1)" > ${{ env.base_name }}.txt
        run: docker exec build-container bash -c "$SCRIPT"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.base_name }}
          path: ${{ env.base_name }}.*
# End job "build-linux"

# Begin job "build-win"
  build-win:
    if: false
    runs-on: ${{ matrix.sys.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      matrix:
        # Available version can be viewed at the Jimver/cuda-toolkit action sources:
        # https://github.com/Jimver/cuda-toolkit/blob/v0.2.21/src/links/windows-links.ts
        sys:
          - { cuda_version: '12.8.0', os: 'windows-2022' }
          - { cuda_version: '12.6.3', os: 'windows-2022' }
          - { cuda_version: '12.5.1', os: 'windows-2022' }
          - { cuda_version: '12.4.1', os: 'windows-2022' }
          - { cuda_version: '12.3.2', os: 'windows-2022' }
          - { cuda_version: '12.2.2', os: 'windows-2022' }
          - { cuda_version: '12.1.1', os: 'windows-2022' }
          - { cuda_version: '12.0.1', os: 'windows-2022' }
          - { cuda_version: '11.8.0', os: 'windows-2022' }
          - { cuda_version: '11.7.0', os: 'windows-2022' }
          - { cuda_version: '11.6.2', os: 'windows-2022' }
          - { cuda_version: '11.5.2', os: 'windows-2022' }
          - { cuda_version: '11.4.4', os: 'windows-2022' }
          - { cuda_version: '11.3.1', os: 'windows-2022' }
          - { cuda_version: '11.2.2', os: 'windows-2019' }
          - { cuda_version: '11.1.1', os: 'windows-2019' }
          - { cuda_version: '11.0.1', os: 'windows-2019' }
#          - { cuda_version: '10.0.130', os: 'windows-2019' }
#          - { cuda_version: '9.2.148', os: 'windows-2019' }
#          - { cuda_version: '8.0.61', os: 'windows-2019' }

    env:
      base_name: mfaktc-${{ github.ref_name }}-win64-cuda${{ matrix.sys.cuda_version }}

    steps:
      - name: Installing CUDA Toolkit
        id: cuda-toolkit
        uses: Jimver/cuda-toolkit@v0.2.21
        with:
          cuda: ${{ matrix.sys.cuda_version }}
          sub-packages: ${{ ( startsWith(matrix.sys.cuda, '12.') || startsWith(matrix.sys.cuda, '11.') || startsWith(matrix.sys.cuda, '10.') ||
                          startsWith(matrix.sys.cuda, '9.') ) && '[ "nvcc", "visual_studio_integration", "cudart" ]' || '[]' }}

      - name: Checkout repo
        uses: actions/checkout@v4

        # bash -c 'echo "All supported CC: $(nvcc --list-gpu-arch | grep -Eoe "compute_[0-9a]+" | cut -d "_" -f2 | /usr/bin/sort -un | xargs)"' # works only with newer NVCC
      - name: Prepare sources and gather info
        id: prepare
        run: |
          choco install -y --no-progress gawk grep sed
          bash -c "echo -n 'All supported CCs: '"
          nvcc --help | bash -c "grep -Eoe 'compute_[0-9a]+' | cut -d _ -f2 | /usr/bin/sort -un | xargs"
          nvcc --help | grep -Eoe "compute_[0-9]+" | cut -d "_" -f2 | awk 'BEGIN { CC=0 }{ if (CC < 0+$1) CC=0+$1 }END{ print "CCMAX=" CC }' | bash -c 'tee $GITHUB_OUTPUT'
          echo "Removing CC arch entries from the Makefile.win and adding all, which current nvcc claims to support..."
          sed -i '/^NVCCFLAGS += --generate-code arch=compute.*/d' src/Makefile.win
          bash -c 'nvcc --list-gpu-arch | grep -Eoe \"compute_[0-9]+\" | cut -d _ -f2 | /usr/bin/sort -un | xargs -i bash -c \"sed -i \\\"/^CUFLAGS = -DWIN64.*$/a NVCCFLAGS += --generate-code arch=compute_{},code=sm_{}\\\" src/Makefile.win\"'

      - name: Dump some info
        run: |
          Get-VSSetupInstance
          vswhere
          vswhere -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath
        continue-on-error: true

      - name: Adding flag to allow unsupported compiler
        if: startsWith(matrix.sys.cuda_version, '11') || startsWith(matrix.sys.cuda_version, '12')
        run: |
          sed -i '/^NVCCFLAGS = .*/a NVCCFLAGS += -allow-unsupported-compiler -D_ALLOW_COMPILER_AND_STL_VERSION_MISMATCH' src/Makefile.win
        continue-on-error: true

      # MSVC 2022 installed on Windows 2022 Github Runner has PowerShell script for a Dev Shell.
      - name: Build from sources (PowerShell with MSVC 2022)
        if: ${{ matrix.sys.os == 'windows-2022' }}
        shell: powershell
        run: |
          & '${{ env.vsdevshell }}' ${{ env.vsdevshellopts }}
          cd "${{ github.workspace }}\src"
          make SHELL="powershell.exe" -f Makefile.win
        env:
          vsdevshell: ${{ matrix.sys.os == 'windows-2022' && 'C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\Launch-VsDevShell.ps1' || 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\Tools\Launch-VsDevShell.ps1' }}
          vsdevshellopts: ${{ matrix.sys.os == 'windows-2022' && '-Arch amd64 -HostArch amd64' || '' }}

      # MSVC 2019 on Windows 2019 has similar script, but it doesn't allows setting arch & host_arch and defaults to x86 (32 bit) env.
      # So we have to run bat file for the env, but Make uses PowerShell afterward because it's much better at handling long paths &
      # quotes when invoked from Make.
      - name: Build from sources (cmd.exe with MSVC 2019)
        if: ${{ matrix.sys.os == 'windows-2019' }}
        shell: cmd
        run: |
          "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat" & cd src & make SHELL="powershell.exe" -f Makefile.win

#      - name: Setup tmate session
#        if: ${{ failure() }}
#        uses: mxschmitt/action-tmate@v3
#        with:
#          limit-access-to-actor: true

      - name: Prepare build archive with description
        run: |
          choco install -y zip
          zip -9 -j "${{ env.base_name }}.zip" *
          echo " [${{ env.base_name }}.zip](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/${{ env.base_name }}.zip) | ${{ steps.prepare.outputs.CCMAX }} | Windows x64 | --- | --- " > "${{ env.base_name }}.txt"
          bash -c "ls -l"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.base_name }}
          path: ${{ env.base_name }}.*
# End job "build-win"

# Begin job "upload-release"
  upload-release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: [ build-linux, build-win ]
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:

      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: Prepare list of release files & release notes
        id: makeinfo
        run: |
          echo -e "Binary releases (automated builds) below. Max CC in the table means maximum supported compute capability version without dot (i.e. 90 reads as 9.0).\n" > RELEASE_NOTES.txt
          echo "Filename | Max CC | Build OS | GCC version | NVCC version" >> RELEASE_NOTES.txt
          echo "--- | --- | --- | --- | ---" >> RELEASE_NOTES.txt
          cat mfaktc-${{ github.ref_name }}-*-cuda*/mfaktc-${{ github.ref_name }}-*-cuda*.txt | sort -Vr >> RELEASE_NOTES.txt
          echo 'RELEASE_FILES<<EOF' > $GITHUB_OUTPUT
          ls -1 mfaktc-${{ github.ref_name }}-*-cuda*/mfaktc-${{ github.ref_name }}-*-cuda*.zip | sort -Vr >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

      - name: Make and upload release
        uses: softprops/action-gh-release@v2.2.1
        with:
          fail_on_unmatched_files: false
          files: |
            ${{ steps.makeinfo.outputs.RELEASE_FILES }}
          preserve_order: true
          generate_release_notes: true
          body_path: RELEASE_NOTES.txt
          make_latest: true
# End job "upload-release"
