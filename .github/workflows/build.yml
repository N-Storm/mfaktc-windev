name: Build mfaktc software

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  build-win:
    runs-on: windows-latest

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

    steps:

      - name: Installing CUDA Toolkit
        id: cuda-toolkit
        uses: Jimver/cuda-toolkit@v0.2.21

      - name: Checkout repo
        uses: actions/checkout@v4

#      - name: Setup tmate session
#        uses: mxschmitt/action-tmate@v3
#        with:
#          limit-access-to-actor: true

      - name: Update Makefile
        id: update_makefile
        run: |
          echo CCMAX=120 > GITHUB_OUTPUT

#          choco install -y grep sed gawk
#          nvcc --help | grep -Eoe "compute_[0-9a]+" | sed -E 's/compute_([0-9a]+)/\\1/g' | awk 'BEGIN { CC=0 }{ if (CC < 0+$1) CC=0+$1 }END{ print CC }' | sed -E 's/.*/CCMAX=\\0/'
#          nvcc --help | grep -Eoe "compute_[0-9a]+" | sed -E 's/compute_([0-9a]+)/\\1/g' | awk 'BEGIN { CC=0 }{ if (CC < 0+$1) CC=0+$1 }END{ print CC }' | sed -E 's/.*/CCMAX=\\0/' > GITHUB_OUTPUT
#          cl --help

#      - uses: johnnynunez/vsdevenv-shell@v2
#        shell: vsdevenv x64 bash {0}

      - name: Build from sources test
        shell: cmd
        run: |
          cd src && make -d -f Makefile.win
#          cl /Ox /Oy /W2 /fp:fast /nologo /c /Tp sieve.c
#          cl /Ox /Oy /W2 /fp:fast /nologo /c /Tp timer.c
#          make -d -f Makefile.win sieve.obj
#          dir

#          "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat" -arch=amd64 & 
#          choco install -y make
#          & nvcc -O2 -c tf_96bit.cu -o tf_96bit.obj -DWIN64 -Xcompiler /EHsc,/W3,/nologo,/Ox -m64 --ptxas-options=-v -arch=all -O3 -DSHORTCUT_75BIT
#          make -f Makefile.win
#          "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat" -arch=amd64 & nvcc -O2 -c tf_96bit.cu -o tf_96bit.obj -DWIN64 -Xcompiler /EHsc,/W3,/nologo,/Ox -m64 --ptxas-options=-v -arch=all -O3 -DSHORTCUT_75BIT

      - name: Build from sources test (PowerShell)
        run: |
          cd src
          & 'C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\Launch-VsDevShell.ps1' -Arch amd64
          cd "${{ github.workspace }}\src"
          cl /Ox /Oy /W2 /fp:fast /nologo /c /Tp sieve.c
          cl /Ox /Oy /W2 /fp:fast /nologo /c /Tp timer.c
          dir
          make --version
          C:\ProgramData\chocolatey\lib\make\tools\install\bin\make -d -f Makefile.win
          dir

      - name: Prepare build archive with description
        run: |
          SET BASE_NAME="mfaktc-${{ github.ref_name }}-win64-cuda${{ matrix.sys.cuda_version }}"
          zip -9 -j %BASE_NAME%.zip *
          echo " [%BASE_NAME%.zip](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/%BASE_NAME%.zip) | ${{ steps.update_makefile.outputs.CCMAX }} | ${{ matrix.sys.ct_os }} | --- | --- " > %BASE_NAME%.txt

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: mfaktc-${{ github.ref_name }}-win64-cuda${{ matrix.sys.cuda_version }}
          path: mfaktc-${{ github.ref_name }}-win64-cuda${{ matrix.sys.cuda_version }}.zip

  upload_release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build-win
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:

      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: Prepare list of release files & release notes
        id: makeinfo
        run: |
          echo -e "Binary releases (automated builds) below. Max CC in the table means maximum supported compute capability version without dot (i.e. 90 reads as 9.0).\n" > RELEASE_NOTES.txt
          echo "Filename | Max CC | Build OS | GCC version | NVCC version" >> RELEASE_NOTES.txt
          echo "--- | --- | --- | --- | ---" >> RELEASE_NOTES.txt
          cat mfaktc-${{ github.ref_name }}-linux64-cuda*/mfaktc-${{ github.ref_name }}-linux64-cuda*.txt | sort -Vr >> RELEASE_NOTES.txt
          echo 'RELEASE_FILES<<EOF' > $GITHUB_OUTPUT
          ls -1 mfaktc-${{ github.ref_name }}-linux64-cuda*/mfaktc-${{ github.ref_name }}-linux64-cuda*.zip | sort -Vr >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

      - name: Make and upload release
        uses: softprops/action-gh-release@v2.2.1
        with:
          fail_on_unmatched_files: false
          files: |
            ${{ steps.makeinfo.outputs.RELEASE_FILES }}
          preserve_order: true
          generate_release_notes: true
          body_path: RELEASE_NOTES.txt
          make_latest: true
