name: Build mfaktc software

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  build-win:
    runs-on: windows-latest

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

    steps:

#      - name: Installing CUDA Toolkit
#        id: cuda-toolkit
#        uses: Jimver/cuda-toolkit@v0.2.21

#      - name: Install MSVC++ shell
#        uses: ilammy/msvc-dev-cmd@v1.13.0
#        with:
#          arch: x64

      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Update Makefile
        id: update_makefile
        run: |
          echo CCMAX=120 > GITHUB_OUTPUT
          choco install -y make
          dir C:\ProgramData\chocolatey\lib\make\tools
          dir C:\ProgramData\chocolatey\lib\make\tools\install\bin

#          choco install -y grep sed gawk
#          nvcc --help | grep -Eoe "compute_[0-9a]+" | sed -E 's/compute_([0-9a]+)/\\1/g' | awk 'BEGIN { CC=0 }{ if (CC < 0+$1) CC=0+$1 }END{ print CC }' | sed -E 's/.*/CCMAX=\\0/'
#          nvcc --help | grep -Eoe "compute_[0-9a]+" | sed -E 's/compute_([0-9a]+)/\\1/g' | awk 'BEGIN { CC=0 }{ if (CC < 0+$1) CC=0+$1 }END{ print CC }' | sed -E 's/.*/CCMAX=\\0/' > GITHUB_OUTPUT
#          cl --help

#      - uses: johnnynunez/vsdevenv-shell@v2
#        shell: vsdevenv x64 bash {0}

      - name: Build from sources test
        shell: cmd
        run: |
          cd src && make -d -f Makefile.win
#          cl /Ox /Oy /W2 /fp:fast /nologo /c /Tp sieve.c
#          cl /Ox /Oy /W2 /fp:fast /nologo /c /Tp timer.c
#          make -d -f Makefile.win sieve.obj
#          dir

#          "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat" -arch=amd64 & 
#          choco install -y make
#          & nvcc -O2 -c tf_96bit.cu -o tf_96bit.obj -DWIN64 -Xcompiler /EHsc,/W3,/nologo,/Ox -m64 --ptxas-options=-v -arch=all -O3 -DSHORTCUT_75BIT
#          make -f Makefile.win
#          "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat" -arch=amd64 & nvcc -O2 -c tf_96bit.cu -o tf_96bit.obj -DWIN64 -Xcompiler /EHsc,/W3,/nologo,/Ox -m64 --ptxas-options=-v -arch=all -O3 -DSHORTCUT_75BIT

      - name: Build from sources test (PowerShell)
        run: |
          cd src
          & 'C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\Launch-VsDevShell.ps1' -Arch amd64
          cd "${{ github.workspace }}\src"
          cl /Ox /Oy /W2 /fp:fast /nologo /c /Tp sieve.c
          cl /Ox /Oy /W2 /fp:fast /nologo /c /Tp timer.c
          dir
          make --version
          C:\ProgramData\chocolatey\lib\make\tools\install\bin\make -d -f Makefile.win
          dir

      - name: Prepare build archive with description
        run: |
          SET BASE_NAME="mfaktc-${{ github.ref_name }}-win64-cuda${{ matrix.sys.cuda_version }}"
          zip -9 -j %BASE_NAME%.zip *
          echo " [%BASE_NAME%.zip](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/%BASE_NAME%.zip) | ${{ steps.update_makefile.outputs.CCMAX }} | ${{ matrix.sys.ct_os }} | --- | --- " > %BASE_NAME%.txt

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: mfaktc-${{ github.ref_name }}-win64-cuda${{ matrix.sys.cuda_version }}
          path: mfaktc-${{ github.ref_name }}-win64-cuda${{ matrix.sys.cuda_version }}.zip

  build-linux:
    if: github.ref_name != 'ghactions-windev'
    runs-on: ubuntu-latest

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      matrix:
        sys:
          # Specified version combination must exist as CUDA container image from NVidia: nvcr.io/nvidia/cuda:${{ matrix.sys.cuda_version }}-devel-${{ matrix.sys.ct_os }}
          # Available versions can be found here: https://catalog.ngc.nvidia.com/orgs/nvidia/containers/cuda/tags (note that only Ubuntus are supported by this action)
          - { cuda_version: '12.8.0', ct_os: 'ubuntu22.04' }
          - { cuda_version: '12.6.3', ct_os: 'ubuntu22.04' }
          - { cuda_version: '12.6.2', ct_os: 'ubuntu22.04' }
          - { cuda_version: '12.6.1', ct_os: 'ubuntu22.04' }
          - { cuda_version: '12.6.0', ct_os: 'ubuntu22.04' }
          - { cuda_version: '12.5.1', ct_os: 'ubuntu22.04' }
          - { cuda_version: '12.5.0', ct_os: 'ubuntu22.04' }
          - { cuda_version: '12.4.1', ct_os: 'ubuntu22.04' }
          - { cuda_version: '12.4.0', ct_os: 'ubuntu22.04' }
          - { cuda_version: '12.3.2', ct_os: 'ubuntu22.04' }
          - { cuda_version: '12.3.1', ct_os: 'ubuntu22.04' }
          - { cuda_version: '12.3.0', ct_os: 'ubuntu22.04' }
          - { cuda_version: '12.2.2', ct_os: 'ubuntu22.04' }
          - { cuda_version: '12.2.0', ct_os: 'ubuntu22.04' }
          - { cuda_version: '12.1.1', ct_os: 'ubuntu22.04' }
          - { cuda_version: '12.1.0', ct_os: 'ubuntu22.04' }
          - { cuda_version: '12.0.1', ct_os: 'ubuntu22.04' }
          - { cuda_version: '12.0.0', ct_os: 'ubuntu22.04' }
          - { cuda_version: '11.8.0', ct_os: 'ubuntu22.04' }
          - { cuda_version: '11.7.1', ct_os: 'ubuntu22.04' }
          - { cuda_version: '11.6.2', ct_os: 'ubuntu20.04' }
          - { cuda_version: '11.6.1', ct_os: 'ubuntu20.04' }
          - { cuda_version: '11.5.2', ct_os: 'ubuntu20.04' }
          - { cuda_version: '11.4.3', ct_os: 'ubuntu20.04' }
          - { cuda_version: '11.3.1', ct_os: 'ubuntu20.04' }
          - { cuda_version: '11.2.2', ct_os: 'ubuntu20.04' }
          - { cuda_version: '11.1.1', ct_os: 'ubuntu20.04' }
          - { cuda_version: '11.0.3', ct_os: 'ubuntu20.04' }
          - { cuda_version: '10.2', ct_os: 'ubuntu18.04' }
          - { cuda_version: '9.2', ct_os: 'ubuntu18.04' }
          - { cuda_version: '8.0', ct_os: 'ubuntu16.04' }

    env:
      # We can't use GitHub direct container support on old Ubuntu versions, because actions will fail running from these due to old glibc.cancel-timeout-minutes.cancel-timeout-minutes.
      # As a workaround, Docker containers will be launched separately, running build related actions inside the container via 'docker exec', while generic actions will run on the
      # host runner VM itself.
      CONTAINER: "nvcr.io/nvidia/cuda:${{ matrix.sys.cuda_version }}-devel-${{ matrix.sys.ct_os }}"

    steps:

      - name: Start Docker Container
        run: |
          docker pull $CONTAINER
          docker run --name build-container -d -v ${{ github.workspace }}:/workspace $CONTAINER tail -f /dev/null

      - name: Fix GPG keys for NVidia repo on Ubuntu 16.04
        if: matrix.sys.ct_os == 'ubuntu16.04'
        env:
          SCRIPT: apt-key add /workspace/3bf863cc.pub
        run: |
          wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/3bf863cc.pub
          docker exec build-container bash -c "$SCRIPT"

      - name: Update & install required packages inside the container
        env:
          SCRIPT: |
            apt update
            apt -y full-upgrade
            apt install -y build-essential curl git make python3 sudo unzip wget zip
        run: docker exec build-container bash -c "$SCRIPT"

      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Update Makefile
        id: update_makefile
        shell: bash
        env:
          SCRIPT: |
            cd /workspace
            echo -n "Checking for nvcc maximum supported CC... "
            export CCMAX=$(nvcc --help | grep -Eoe "compute_[0-9]{2}" | cut -d '_' -f2 | sort -un | tail -n1)
            echo $CCMAX
            echo "CCMAX=$CCMAX" >> GITHUB_OUTPUT

            echo "Removing unsupported CCs (> $CCMAX) from the Makefile"
            for cc in $(grep -E '^NVCCFLAGS \+=.*?compute_[0-9]{2}' src/Makefile | grep -Eoe 'compute_[0-9]{2}' | tr -d '\r' | cut -d '_' -f2 | xargs); do
              if [[ $cc -gt $CCMAX ]]; then
                echo "Removing CC $cc"
                sed -i -E "/^NVCCFLAGS \+=.*?compute_$cc/d" src/Makefile
              fi
            done

            echo "Adding libraries to LDFLAGS to support static build on older Ubuntu versions..."
            sed -i -E 's/^(LDFLAGS = .*? -lcudart_static) (.*)/\1 -ldl -lrt -lpthread \2/' src/Makefile
        run: |
          docker exec build-container bash -c "$SCRIPT"
          cat GITHUB_OUTPUT > $GITHUB_OUTPUT
          rm -f GITHUB_OUTPUT

      - name: Build from sources
        env:
          SCRIPT: cd /workspace/src && make -j$(nproc)
        run: docker exec build-container bash -c "$SCRIPT"

      - name: Prepare zip archive for release and build description
        if: startsWith(github.ref, 'refs/tags')
        env:
          SCRIPT: |
            cd /workspace
            export BASE_NAME="mfaktc-${{ github.ref_name }}-linux64-cuda${{ matrix.sys.cuda_version }}"
            zip -9 -j ${BASE_NAME}.zip *
            echo "[${BASE_NAME}.zip](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/${BASE_NAME}.zip) | \
            ${{ steps.update_makefile.outputs.CCMAX }} | ${{ matrix.sys.ct_os }} | $(gcc --version | head -n1) | $(nvcc --version | tail -n1)" > ${BASE_NAME}.txt
        run: docker exec build-container bash -c "$SCRIPT"

      - name: Upload build artifacts for release
        if: startsWith(github.ref, 'refs/tags')
        uses: actions/upload-artifact@v4
        with:
          name: mfaktc-${{ github.ref_name }}-linux64-cuda${{ matrix.sys.cuda_version }}
          path: mfaktc-${{ github.ref_name }}-linux64-cuda${{ matrix.sys.cuda_version }}.*

  upload_release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build-win
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:

      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: Prepare list of release files & release notes
        id: makeinfo
        run: |
          echo -e "Binary releases (automated builds) below. Max CC in the table means maximum supported compute capability version without dot (i.e. 90 reads as 9.0).\n" > RELEASE_NOTES.txt
          echo "Filename | Max CC | Build OS | GCC version | NVCC version" >> RELEASE_NOTES.txt
          echo "--- | --- | --- | --- | ---" >> RELEASE_NOTES.txt
          cat mfaktc-${{ github.ref_name }}-linux64-cuda*/mfaktc-${{ github.ref_name }}-linux64-cuda*.txt | sort -Vr >> RELEASE_NOTES.txt
          echo 'RELEASE_FILES<<EOF' > $GITHUB_OUTPUT
          ls -1 mfaktc-${{ github.ref_name }}-linux64-cuda*/mfaktc-${{ github.ref_name }}-linux64-cuda*.zip | sort -Vr >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

      - name: Make and upload release
        uses: softprops/action-gh-release@v2.2.1
        with:
          fail_on_unmatched_files: false
          files: |
            ${{ steps.makeinfo.outputs.RELEASE_FILES }}
          preserve_order: true
          generate_release_notes: true
          body_path: RELEASE_NOTES.txt
          make_latest: true
